name: Terraform Deployment

on:
  workflow_call:
    inputs:
      environment:
        description: 'Select environment'
        required: true
        type: string
      cluster:
        description: 'Select cluster'
        required: true
        type: string
      service:
        description: 'Select service (aws)'
        required: true
        type: string
    

jobs:
  terraform-deployment:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./${{ inputs.environment }}/${{ inputs.cluster }}/${{ inputs.service }}

    env:
        TF_VERSION: "1.10.3"
        TF_LOG: INFO
        #TF_VAR_private_ssh_key: "${{ secrets.SSH_PRIVATE_KEY}}"
        #TF_VAR_confluent_cloud_api_key: "${{ secrets.CC_API_KEY }}"
        #TF_VAR_confluent_cloud_api_secret: "${{ secrets.CC_API_SECRET }}"
        TF_VAR_aws_access_key_id: ""
        TF_VAR_aws_secret_access_key_id: ""
        #TF_VAR_aws_account_id: ""
        #TF_VAR_argocd_admin_password: ""
        # TF_VAR_skp_database_password: ""
        # TF_VAR_sensitive_header: ""
        #AWS_ROLE: ""
        #TF_VAR_aws_secret_access_key: ""
        #TF_VAR_aws_oidc_role_arn: ""

    
    steps:
      - name: 'Checkout GitHub repository'
        uses: actions/checkout@v2

      - name: 'Set secrets based on environment'
        run: |
          if [[ "${{ inputs.cluster }}" == "dev_aws" ]]; then
            echo "TF_VAR_aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
            echo "TF_VAR_aws_access_key_id=${{ secrets.AWS_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "TF_VAR_aws_secret_access_key_id=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
          elif [[ "${{ inputs.cluster }}" == "uat_aws" ]]; then
            echo "TF_VAR_aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
            echo "TF_VAR_aws_access_key_id=${{ secrets.AWS_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "TF_VAR_aws_secret_access_key_id=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
          elif [[ "${{ inputs.cluster }}" == "prod_aws" ]]; then
            echo "TF_VAR_aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
            echo "TF_VAR_aws_access_key_id=${{ secrets.AWS_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "TF_VAR_aws_secret_access_key_id=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
          fi
      
      - name: List all environment variables
        run: printenv

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: '${{ secerts.AWS_ACCESS_KEY }}'
          aws-secret-access-key: '${{ secrets.SECRET_KEY }}'
          aws-region: us-east-2


      - name: 'Setup Terraform CLI'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
        
      - name: 'Terraform remove cache plugin'
        id: rm 
        run: rm -rf .terraform
      - name: 'Terraform init'
        id: init
        run: terraform init -reconfigure
        
      - name: 'Terraform validate'
        id: validate
        run: terraform validate
        
      - name: 'Terraform format'
        id: fmt
        run: terraform fmt

      - name: Terraform Plan
        id: plan
        run: terraform plan
        if: github.event_name == 'pull_request'


      # - name: Comment Staus of Terraform Plan on PR
      #   uses: actions/github-script@v6
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #         const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
      #         #### Terraform Initialization \`${{ steps.init.outcome }}\`
      #         #### Terraform Validation \`${{ steps.validate.outcome }}\`

      #         #### Terraform Plan \`${{ steps.plan.outcome }}\`

      #         *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
